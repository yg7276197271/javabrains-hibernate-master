package org.obliquid.hibernate._01_create_read;

import java.util.Date;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * The name property of @Table sets the table name. Use @Transient (on a getter
 * or field) to avoid persisting a field.
 * 
 * @author stivlo
 * 
 */
//@Entity(name="user_det")
@Entity
@Table(name = "user_det")
public class UserDetail {

	private int userId;
	// @Column(name="userName") can add here on field or on the getters
	@Basic()
	private String userName;
	
	private Date joinedDate;

	private String address;

	private String description;

	/**
	 * The name property of @Column can be used to change the default column
	 * name.
	 * 
	 * @return the userId
	 */
	@Id
	// @GeneratedValue(strategy = GenerationType.AUTO)
	// the persistence provider/hibernate will determine values based on the type of the
	// primary key attribute.

	//@GeneratedValue(strategy = GenerationType.IDENTITY)
	// Sqlserver provides feature of Identity column
	// /This type of generation relies on the IdentityGenerator,
	// which expects values generated by an identity column in the database.
	// This means they are auto-incremented
	// Not all Databases have this feature
	
	
	@TableGenerator(name="tg" , table="pk_table", pkColumnName="name" , valueColumnName="vlaue" ,
	allocationSize=10)
	@GeneratedValue(strategy=GenerationType.TABLE , generator="tg")	// We can have a separate table for maintaining id's
	// generate primary key values and uses a database sequence to generate unique values

	
	//@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq_name")
	  
	 // @SequenceGenerator(name = "seq_name", sequenceName = "seq_name_in_database", allocationSize = 1) 
		//We can have sequence for  Maintaining Id's
	  //It simulates a sequence by storing and updating its current value in a database table 
	  //which requires the use of pessimistic locks that put all transactions into sequential order
	 
	@Column(name = "id")
	public int getUserId() {
		return userId;
	}

	/**
	 * @return the joinedDate
	 */
	//@Transient //value is not saved in Database
	@Temporal(TemporalType.DATE)
	// @Temporal(TemporalType.TIMESTAMP)
	public Date getJoinedDate() {
		return joinedDate;
	}

	/**
	 * @param joinedDate
	 *            the joinedDate to set
	 */
	public void setJoinedDate(Date joinedDate) {
		this.joinedDate = joinedDate;
	}

	/**
	 * @return the address
	 */
	public String getAddress() {
		return address;
	}

	/**
	 * @param address
	 *            the address to set
	 */
	public void setAddress(String address) {
		this.address = address;
	}

	/**
	 * @return the description
	 */
	@Lob // If we have long description above 255 chars then add this annotation
	public String getDescription() {
		return description;
	}

	/**
	 * @param description
	 *            the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @param userId
	 *            the userId to set
	 */
	public void setUserId(int userId) {
		this.userId = userId;
	}

	/**
	 * @return the userName
	 */
	@Column(name = "user_name")
	public String getUserName() {
		return userName + " From Getter";
	}

	/**
	 * @param userName
	 *            the userName to set
	 */
	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Override
	public String toString() {
		return "userId=" + getUserId() + "\nuserName=" + getUserName() + "\ndescription=" + getDescription();
	}

}
